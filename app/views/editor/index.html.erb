<div id="shadergif-app" class="vertical-scroll-parent columns">
	<p v-if="status != ''"
	   class="app-status">
		{{ status }}
	</p>

	<div class="column limit-width-desktop">
		<div class="vertical-scroll gif-pane">
			<div class="text-center">
				<h3>Gif preview</h3>
				<div class="player-container">
				</div>
			</div>
			<pre class="error-pre">{{ error_msg }}</pre>
			<div class="foldable">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/edit.svg">
					Gif/Draft Management
				</div>
				<div class="foldable-content">
					<div class="draft-management">
						<template v-if="is_current_users_gif">
							<%= form_tag("/gifs/save", method: "post") do %>
								<div class="columns">
									<div class="column">
										<div class="field">
											<label class="label">Title</label>
											<div class="control">
												<input type="text" name="title" placeholder="Give this a name" v-model="gif.title">
											</div>
										</div>
									</div>
									<div class="column">
										<div class="field">
											<label class="label">
												Language
											</label>
											<div class="control select">
												<select v-model="lang" class="inline-block">
													<option>shader_webgl1</option>
													<option>mathjs</option>
												</select>
											</div>
										</div>
									</div>
								</div>
								<div class="field" v-if="gif.is_public">
									<label class="label">Description</label>
									<div class="control">
										<textarea name="description"
												  class="textarea"
												  v-model="gif.description"
										></textarea>
									</div>
								</div>
								<input type="hidden"
									   name="code"
									   v-bind:value="code">
								<input type="hidden"
									   name="id"
									   v-model="gif.id">
								<input type="hidden"
									   name="lang"
									   v-model="gif.lang">
								<div class="has-text-right pull-right">
									<%= submit_tag "Save", :class => "button is-primary" %>
								</div>
								<br>
								<p>Note: Submitted gifs themselves can't be updated, only the code, title and description.</p>
							<% end %>
						</template>
						<template v-else-if="user != null">
							<%= form_tag("/gifs/save_draft", method: "post") do %>
								<div class="field">
									<label class="label">Save code as a new draft</label>
									<div class="control">
										<input type="text" name="title" placeholder="Give this a name" value="">
									</div>
								</div>
								<input type="hidden"
									   name="code"
									   v-model="code">
								<input type="hidden"
									   name="draft_id"
									   value="">
								<input type="hidden"
									   name="lang"
									   v-model="lang">
								<div class="has-text-right pull-right">
									<%= submit_tag "Save draft", :class => "button is-primary" %>
								</div>
							<% end %>
						</template>
						<template v-else>
							<div class="text-center">
								Create an account or login to save gifs drafts
							</div>
							<div class="text-center">
								<br>
								<label>
									Language:
								</label>
								<div class="select">
									<select v-model="lang" class="inline-block">
										<option>shader_webgl1</option>
										<option>mathjs</option>
									</select>
								</div>
							</div>
						</template>
					</div>
				</div>
			</div>
			<div class="foldable foldable-hidden" v-if="is_current_users_gif">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/trash.svg">
					Delete Gif Zone
				</div>
				<div class="foldable-content">					
					<div class="has-text-center">
						<p class="has-text-weight-bold">Danger</p>
						<div class="text-center">
							<form method="post" v-bind:action="'/gifs/' + gif.id + '/delete'">
								<%= hidden_field_tag :authenticity_token, form_authenticity_token -%>
								<input type="hidden"
									   name="gif_id"
									   v-bind:value="gif.id">
								<%= submit_tag "Delete gif", :class => "button is-danger", data: { :confirm => 'Do you really want to delete this gif?' } %>
							</form>
						</div>
					</div>
				</div>
			</div>
			<div class="foldable">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/sliders.svg">
					Gif tools
				</div>
				<div class="foldable-content">
					<div class="text-center">
						<p>
							<template v-if="!rendering_gif">
								<button name="make-gif" v-on:click="make_gif" class="inline-block">
									<img class="feather-icon" src="/icons/feather/plus.svg">
									Create gif
								</button>
							</template>
							<template v-else>
								<button class="inline-block">
									<img class="feather-icon" src="/icons/feather/loader.svg">
									Rendering...
								</button>
							</template>
							
							<button name="make-png" v-on:click="make_png" class="inline-block">
								<img class="feather-icon" src="/icons/feather/image.svg">
								Create stacked png
							</button>
							<button name="make-zip"
										  v-on:click="make_zip"
									class="inline-block">
								<img class="feather-icon" src="/icons/feather/folder.svg">
								Create .zip file
							</button>
							<a v-if="has_zip"
							   v-bind:href="zip_url"
							   download="images.zip"
							   class="inline-block"
							   v-on:click="delete_downloaded_zip">
								<button>
									Save Zip
								</button>
							</a>
						</p>
						<br>
						<p>
							<label for="autocompile">
								Automatically recompile while typing
							</label>
							<input id="autocompile" type="checkbox" v-model="autocompile">
						</p>
						<br>
						<p v-if="!autocompile">
							<button name="recompile"
									v-on:click="recompile">
								Compile and run
							</button>
							<br>
						</p>
					</div>
					<div class="text-center">
						<div class="settings inline-block">
							<p>
								w:<input type="number" v-model.number="width">
								h:<input type="number" v-model.number="height">
								frames:<input type="number"
											  v-if="!frames_defined_in_code"
											  v-model.lazy.number="frames">
								<span v-if="frames_defined_in_code"
									  title="(defined in code)">
									{{ frames }}
								</span>
							</p>
						</div>
					</div>
				</div>
			</div>
			<div class="foldable" v-if="lang == 'mathjs'">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/life-buoy.svg">
					MathJS mode help
				</div>
				<div class="foldable-content">
					<div class="settings">
						<p>
							The expression in the editor will be ran on all pixels.
							<br>
							You can use plain math syntax, sin, cos, the ternary operator (?:).
						</p>
						<br>
						<p>
							The result can be a 3 component array that will be interpreted as rgb values:
						</p>
						<pre class="mathjs-pre">[0.3, cos(x * 10), 0.0]</pre>
						<br>
						<p>
							The result can also be a single value that will be interpreted as grayscale.
						</p>
						<pre class="mathjs-pre">cos(3 * sqrt(x^2 + y ^2))</pre>
						<br>
						<p>
							Have a look at the math js syntax here:
							<a target="_blank" href="http://mathjs.org/docs/expressions/syntax.html">
								http://mathjs.org/docs/expressions/syntax.html
							</a>
						</p>
					</div>
				</div>
			</div>
			<div class="foldable foldable-hidden">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/image.svg">
					Textures
				</div>
				<div class="foldable-content">
					<div class="settings" v-if="!texture_support">
						<p>Textures not supported for this language.</p>
					</div>
					<div class="settings" v-else>
						<div class="textures">
							<table class="table textures-list">
								<tr>
									<th>
										#
									</th>
									<th>
										File name
									</th>
									<th>
										Sampler2D name
									</th>
									<th class="has-text-right">
										Remove Texture
									</th>
								</tr>
								<tr v-for="(texture, index) in textures">
									<td>
										{{ index }}
									</td>
									<td>
										<input type="text" v-model="texture.name">
									</td>
									<td>
										<span title="sampler2D name">texture{{ index }}<span>
									</td>
									<td class="has-text-right">
										<button class="delete-texture-button"
												v-on:click="delete_texture(index)">
											Remove
										</button>
									</td>
								</tr>
								<tr>
									<td colspan="2">
										<input type="file" name="texture" class="shadergif-texture-input" accept=".png,.jpg" multiple>
									</td>
									<td colspan="2" class="has-text-right">
										<button class="new-texture-button"
											v-on:click="new_texture">Add</button>
									</td>
								</tr>
							</table>
						</div>
						<p>
							Example use:
						</p>
						<pre class="texture-info-pre">// Top of the file:
uniform sampler2D texture0;
// Main:
col += texture2D(texture0,  UV * vec2(1.0, -1.0) + vec2(0.0, 1.0));</pre>
					</div>
				</div>
			</div>
			<div class="foldable foldable-hidden">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/settings.svg">
					gif.js settings
				</div>
				<div class="foldable-content">
					<div class="settings">
						<p>
							Quality:<input type="number" v-model="gifjs.quality">
							<br>
							Dithering:
							<select v-model="gifjs.dithering">
								<option value="false">none</option>
								<option value="FloydSteinberg">FloydSteinberg</option>
								<option value="FalseFloydSteinberg">FalseFloydSteinberg</option>
								<option value="Stucki">Stucki</option>
								<option value="Atkinson">Atkinson</option>
							</select>
						</p>
					</div>
				</div>
			</div>
			<div class="foldable foldable-hidden" v-if="sound_support">
				<div class="foldable-header">
					<img class="feather-icon" src="/icons/feather/speaker.svg">
					GPU sound tools
				</div>
				<div class="foldable-content">
					<div class="text-center">
						<button class="inline-block"
								v-if="!sound_mode"
								v-on:click="enable_sound_mode">
							Sound mode
						</button>
						<div v-if="sound_mode">
							<button name="play-sound" class="inline-block"
									v-on:click="play_sound">
								Play sound
							</button>
							<button name="stop-sound" class="inline-block"
									v-on:click="stop_sound">
								Stop
							</button>
							<br><br>
							<button class="inline-block"
										   v-on:click="load_default_sound_shader">
								Load default sound shader
							</button>
							<button class="inline-block"
										   v-on:click="disable_sound_mode">
								Disable sound mode
							</button>
						</div>
					</div>
				</div>
			</div>				
			<hr>
			
			<div class="text-center">
				<h3>Gifs results</h3>
			</div>
			
			<div class="result-images">
				<div v-for="(image, index) in images"
					 class="container is-fluid">
					<div class="result-image">
						<p class="has-text-right close-result-button"
						   title="Close if you will not use this result."
						   v-on:click="images.splice(index, 1)">[close]</p>
						<p v-if="image.size" class="text-center">Size:{{ image.size }} kb</p>
						<img v-bind:src="image.src">
						<template v-if="image.type == 'gif'">
							<% if user_signed_in? %>
								<p class="has-text-weight-bold">Submit to front page</p>
								<p>Please include licensing information in
									the code if needed.</p>
								
								<%= form_tag("/gifs/new", method: "post") do %>
									<input type="hidden"
										   name="image"
										   v-bind:value="image.blob">
									<input type="hidden"
										   name="code"
										   v-bind:value="image.code">
									<input type="hidden"
										   name="lang"
										   v-bind:value="lang">
									<input type="hidden"
										   name="lang"
										   v-bind:value="lang">
									<!-- All the textures as form elements -->
									<template v-for="(texture, index) in textures">
										<input type="hidden"
											   v-bind:name="'textures[][name]'"
											   v-model="texture.name">
										<input type="hidden"
											   v-bind:name="'textures[][data]'"
											   v-model="texture.data">
									</template>
									<input type="hidden"
										   name="draft_id"
										   v-if="gif != null"
										   v-bind:value="gif.id">
									<div class="field">
										<label class="label">Title</label>
										<div class="control">
											<input type="text" name="title">
										</div>
									</div>
									<div class="field">
										<label class="label">Description</label>
										<div class="control">
											<textarea name="description" class="textarea"
											></textarea>
										</div>
									</div>
									
									<div class="has-text-right">
										<%= submit_tag "Publish", :class => "button is-primary" %>
									</div>
								<% end %>
							<% else %>
								<div class="text-center">
									Create an account or login to submit gifs
								</div>
							<% end %>
						</template>
					</div>
				</div>
			</div>
			
			<br>
			
			<div class="text-left">
				<p>
					<b>Linux/ImageMagick tips</b>
					<br>
					To make a gif from the png images in the .zip archive in Linux:
				</p>
				<pre>convert image-*.png anim.gif</pre>
				<p>
					For stacked png, on Linux, you can split the result like this:
					<pre>convert image.png -crop {{width}}x{{height}} +repage image-%04d.png</pre>
				</p>
				<p>
					And then make gifs:
				</p>
				<pre>convert image-*.png anim.gif</pre>
			</div>
		</div>
	</div>
	<div class="column limit-width-desktop">
		<div class="vertical-scroll">
			<textarea name='fragment' v-model="code">
			</textarea>
		</div>
	</div>
</div>
<script name="start-gif" type="text/plain">
 <% if !@gif.nil? %>
 <%= raw(@gif.to_json( :include => [:textures] )) %>
 <% end %>
</script>
<script name="user" type="text/plain">
 <% if !current_user.nil? %>
 <%= raw(current_user.to_json(only: [:id] )) %>
 <% end %>
</script>
<%= render :partial => 'default_shader_scripts' %>
<%= javascript_include_tag 'editor' %>

